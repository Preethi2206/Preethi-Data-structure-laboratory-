class StudentNode:
    def __init__(self, student_id, name, grade, major):
        self.student_id = student_id
        self.name = name
        self.grade = grade
        self.major = major
        self.left = None
        self.right = None
class StudentBST:
    def __init__(self):
        self.root = None
    def insert(self, student_id, name, grade, major):
        def _insert(root, node):
            if not root:
                return node
            if student_id < root.student_id:
                root.left = _insert(root.left, node)
            else:
                root.right = _insert(root.right, node)
            return root
        new_student = StudentNode(student_id, name, grade, major)
        self.root = _insert(self.root, new_student)
    def find(self, student_id):
        def _find(root, student_id):
            if not root:
                return None
            if root.student_id == student_id:
                return root
            elif student_id < root.student_id:
                return _find(root.left, student_id)
            else:
                return _find(root.right, student_id)
        return _find(self.root, student_id)
    def get_all_student_ids(self):
        result = []
        def _in_order_traversal(root):
            if root:
                _in_order_traversal(root.left)
                result.append(root.student_id)
                _in_order_traversal(root.right)
        _in_order_traversal(self.root)
        return result
