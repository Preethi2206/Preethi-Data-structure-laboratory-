#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 100
#define INF 999999
typedef struct {
    int x, y;
    bool isObstacle;
} Node;
Node* create_node(int x, int y, bool isObstacle) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->x = x;
    newNode->y = y;
    newNode->isObstacle = isObstacle;
    return newNode;
}
int grid[MAX][MAX];
int visited[MAX][MAX];
int dx[] = {-1, 1, 0, 0}; 
int dy[] = {0, 0, -1, 1};
int bfs(Node* start, Node* goal, int rows, int cols) {
    int queue[MAX * MAX][2], front = 0, rear = 0;
    queue[rear][0] = start->x; queue[rear][1] = start->y;
    visited[start->x][start->y] = 1;
    int distance = 0;
    while (front <= rear) {
        int x = queue[front][0], y = queue[front][1];
        front++;
        if (x == goal->x && y == goal->y)
            return distance;
        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i], newY = y + dy[i];
            if (newX >= 0 && newX < rows && newY >= 0 && newY < cols &&
                !visited[newX][newY] && grid[newX][newY] != 1) {
                queue[++rear][0] = newX;
                queue[rear][1] = newY;
                visited[newX][newY] = 1;
            }
        }
        distance++;
    }
    return -1; 
}
int main() {
    int rows = 5, cols = 5;
    Node* start = create_node(0, 0, false);
    Node* goal = create_node(4, 4, false);
    grid[2][2] = 1; // Obstacle at (2, 2)
    int result = bfs(start, goal, rows, cols);
    if (result != -1) printf("Shortest path length: %d\n", result);
    else printf("No path found.\n");
    return 0;
}
