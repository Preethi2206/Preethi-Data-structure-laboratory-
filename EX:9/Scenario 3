#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define MAX_LOCATIONS 100
typedef struct {
    int destination;
    int weight;
} Edge;
typedef struct {
    Edge edges[MAX_LOCATIONS][MAX_LOCATIONS];
    int numEdges[MAX_LOCATIONS];
    int numLocations;
} Graph;
void initGraph(Graph* graph) {
    graph->numLocations = 0;
    for (int i = 0; i < MAX_LOCATIONS; i++) {
        graph->numEdges[i] = 0;
    }
}
void addLocation(Graph* graph) {
    if (graph->numLocations < MAX_LOCATIONS) {
        graph->numLocations++;
    } else {
        printf("Maximum locations reached.\n");
    }
}
void addEdge(Graph* graph, int src, int dest, int weight) {
    if (src < graph->numLocations && dest < graph->numLocations) {
        graph->edges[src][graph->numEdges[src]].destination = dest;
        graph->edges[src][graph->numEdges[src]].weight = weight;
        graph->numEdges[src]++;
    } else {
        printf("Invalid location index.\n");
    }
}
void dijkstra(Graph* graph, int start) {
    int dist[MAX_LOCATIONS];
    int visited[MAX_LOCATIONS] = {0};
    for (int i = 0; i < graph->numLocations; i++) {
        dist[i] = INT_MAX;
    }
    dist[start] = 0;
    for (int count = 0; count < graph->numLocations - 1; count++) {
        int minIndex = -1;
        int minValue = INT_MAX;
        for (int v = 0; v < graph->numLocations; v++) {
            if (!visited[v] && dist[v] < minValue) {
                minValue = dist[v];
                minIndex = v;
            }
        }
        visited[minIndex] = 1;

        for (int j = 0; j < graph->numEdges[minIndex]; j++) {
            Edge edge = graph->edges[minIndex][j];
            if (!visited[edge.destination] && dist[minIndex] != INT_MAX &&
                dist[minIndex] + edge.weight < dist[edge.destination]) {
                dist[edge.destination] = dist[minIndex] + edge.weight;
            }
        }
    }

    printf("Shortest distances from location %d:\n", start);
    for (int i = 0; i < graph->numLocations; i++) {
        printf("To location %d: %d\n", i, dist[i]);
    }
}
int main() {
    Graph graph;
    initGraph(&graph);
    addLocation(&graph); 
    addLocation(&graph); 
    addLocation(&graph); 
    addLocation(&graph);
    addEdge(&graph, 0, 1, 10);
    addEdge(&graph, 0, 2, 5);
    addEdge(&graph, 1, 2, 2);
    addEdge(&graph, 1, 3, 1);
    addEdge(&graph, 2, 1, 3);
    addEdge(&graph, 2, 3, 9);
    addEdge(&graph, 2, 0, 2);
    addEdge(&graph, 3, 0, 7);
    dijkstra(&graph, 0);
    return 0;
}
