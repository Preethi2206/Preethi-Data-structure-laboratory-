class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
class Stack:
    def __init__(self):
        self.top = None
    def push(self, value):
        new_node = Node(value)
        new_node.next = self.top
        self.top = new_node
    def pop(self):
        if not self.top:
            return None
        popped_value = self.top.value
        self.top = self.top.next
        return popped_value
    def is_empty(self):
        return self.top is None
def is_balanced(expression):
    stack = Stack()
    for char in expression:
        if char in "({[":
            stack.push(char)
        elif char in ")}]":
            if stack.is_empty():
                return False
            top = stack.pop()
            if (char == ")" and top != "(") or \
               (char == "}" and top != "{") or \
               (char == "]" and top != "["):
                return False
    return stack.is_empty()
expression = "{[()()]}"
print("Balanced" if is_balanced(expression) else "Not balanced")
