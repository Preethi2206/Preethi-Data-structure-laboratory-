class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
class Stack:
    def __init__(self):
        self.top = None
    def push(self, value):
        new_node = Node(value)
        new_node.next = self.top
        self.top = new_node
    def pop(self):
        if not self.top:
            return None
        popped_value = self.top.value
        self.top = self.top.next
        return popped_value
    def is_empty(self):
        return self.top is None
def is_syntax_valid(code):
    stack = Stack()
    pairs = {')': '(', '}': '{', ']': '['}  
    for char in code:
        if char in "({[":
            stack.push(char)
        elif char in ")}]":
            if stack.is_empty() or stack.pop() != pairs[char]:
                return False
    return stack.is_empty()
code = "if (a > b) { [c + d] }"
print("Syntax Valid" if is_syntax_valid(code) else "Syntax Invalid")
